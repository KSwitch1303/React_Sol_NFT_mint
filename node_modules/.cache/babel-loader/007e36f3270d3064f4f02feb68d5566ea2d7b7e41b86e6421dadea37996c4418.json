{"ast":null,"code":"var _jsxFileName = \"/home/killswitch/Documents/programs/react/solana_nft_Minting/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { WalletProvider, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletConnectButton } from '@solana/wallet-adapter-react-ui';\nimport { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport anchor from '@project-serum/anchor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst network = clusterApiUrl('devnet'); // Use devnet for testing\n\nasync function createAssociatedTokenAccount(payer, mintAddress) {\n  // ... (same as in your code)\n}\nasync function mintNFT(payer, mint, metadata) {\n  // ... (same as in your code)\n}\nfunction App() {\n  _s();\n  const wallet = useWallet();\n  const [mintAddress, setMintAddress] = useState('');\n  useEffect(() => {\n    const connection = new Connection(network, 'confirmed');\n    async function createNFT() {\n      if (!wallet.connected || !wallet.publicKey) return;\n      anchor.setProvider(wallet.connection);\n      const mint = await createNFTMint(wallet.publicKey);\n      setMintAddress(mint.publicKey.toBase58());\n      const metadata = {\n        name: 'My NFT',\n        symbol: 'NFT',\n        uri: 'https://example.com/nft-metadata'\n      };\n      await mintNFT(wallet, mint, metadata);\n    }\n    createNFT();\n  }, [wallet]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Solana NFT Minting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Minted NFT Mint Address: \", mintAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WalletProvider, {\n        wallets: [],\n        children: /*#__PURE__*/_jsxDEV(WalletConnectButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Cjz4O58HcyXVZ6c04QN9u9lYukQ=\", false, function () {\n  return [useWallet];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Connection","PublicKey","clusterApiUrl","WalletProvider","useWallet","WalletConnectButton","TOKEN_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","anchor","network","createAssociatedTokenAccount","payer","mintAddress","mintNFT","mint","metadata","App","wallet","setMintAddress","connection","createNFT","connected","publicKey","setProvider","createNFTMint","toBase58","name","symbol","uri"],"sources":["/home/killswitch/Documents/programs/react/solana_nft_Minting/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { WalletProvider, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletConnectButton } from '@solana/wallet-adapter-react-ui';\nimport {\n  TOKEN_PROGRAM_ID,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport anchor from '@project-serum/anchor';\n\nconst network = clusterApiUrl('devnet'); // Use devnet for testing\n\nasync function createAssociatedTokenAccount(payer, mintAddress) {\n  // ... (same as in your code)\n}\n\nasync function mintNFT(payer, mint, metadata) {\n  // ... (same as in your code)\n}\n\nfunction App() {\n  const wallet = useWallet();\n  const [mintAddress, setMintAddress] = useState('');\n\n  useEffect(() => {\n    const connection = new Connection(network, 'confirmed');\n\n    async function createNFT() {\n      if (!wallet.connected || !wallet.publicKey) return;\n\n      anchor.setProvider(wallet.connection);\n\n      const mint = await createNFTMint(wallet.publicKey);\n      setMintAddress(mint.publicKey.toBase58());\n\n      const metadata = {\n        name: 'My NFT',\n        symbol: 'NFT',\n        uri: 'https://example.com/nft-metadata',\n      };\n\n      await mintNFT(wallet, mint, metadata);\n    }\n\n    createNFT();\n  }, [wallet]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Solana NFT Minting</h1>\n        <p>Minted NFT Mint Address: {mintAddress}</p>\n        <WalletProvider wallets={[]}>\n          <WalletConnectButton />\n        </WalletProvider>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,UAAU,EAAEC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AACtE,SAASC,cAAc,EAAEC,SAAS,QAAQ,8BAA8B;AACxE,SAASC,mBAAmB,QAAQ,iCAAiC;AACrE,SACEC,gBAAgB,EAChBC,2BAA2B,QACtB,mBAAmB;AAC1B,OAAOC,MAAM,MAAM,uBAAuB;AAAC;AAE3C,MAAMC,OAAO,GAAGP,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAEzC,eAAeQ,4BAA4B,CAACC,KAAK,EAAEC,WAAW,EAAE;EAC9D;AAAA;AAGF,eAAeC,OAAO,CAACF,KAAK,EAAEG,IAAI,EAAEC,QAAQ,EAAE;EAC5C;AAAA;AAGF,SAASC,GAAG,GAAG;EAAA;EACb,MAAMC,MAAM,GAAGb,SAAS,EAAE;EAC1B,MAAM,CAACQ,WAAW,EAAEM,cAAc,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd,MAAMqB,UAAU,GAAG,IAAInB,UAAU,CAACS,OAAO,EAAE,WAAW,CAAC;IAEvD,eAAeW,SAAS,GAAG;MACzB,IAAI,CAACH,MAAM,CAACI,SAAS,IAAI,CAACJ,MAAM,CAACK,SAAS,EAAE;MAE5Cd,MAAM,CAACe,WAAW,CAACN,MAAM,CAACE,UAAU,CAAC;MAErC,MAAML,IAAI,GAAG,MAAMU,aAAa,CAACP,MAAM,CAACK,SAAS,CAAC;MAClDJ,cAAc,CAACJ,IAAI,CAACQ,SAAS,CAACG,QAAQ,EAAE,CAAC;MAEzC,MAAMV,QAAQ,GAAG;QACfW,IAAI,EAAE,QAAQ;QACdC,MAAM,EAAE,KAAK;QACbC,GAAG,EAAE;MACP,CAAC;MAED,MAAMf,OAAO,CAACI,MAAM,EAAEH,IAAI,EAAEC,QAAQ,CAAC;IACvC;IAEAK,SAAS,EAAE;EACb,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAEZ,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB;MAAQ,SAAS,EAAC,YAAY;MAAA,wBAC5B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA2B,eAC3B;QAAA,wCAA6BL,WAAW;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK,eAC7C,QAAC,cAAc;QAAC,OAAO,EAAE,EAAG;QAAA,uBAC1B,QAAC,mBAAmB;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QACR;IAAA;MAAA;MAAA;MAAA;IAAA;EACV;IAAA;IAAA;IAAA;EAAA,QACL;AAEV;AAAC,GAtCQI,GAAG;EAAA,QACKZ,SAAS;AAAA;AAAA,KADjBY,GAAG;AAwCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}